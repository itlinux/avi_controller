
# Author: Remo Mattei
# Email: remo@mattei.org
---
- name: Create a new Web Server deploying using Avi OVA
  hosts: localhost
  connection: local
  gather_facts: true
  tasks:
    - name: Deploying web "{{ machine_name1 }}"
      vmware_deploy_ovf:
        hostname: "{{ vcenter.vcenter_url }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ vcenter.datacenter }}"
        cluster: "{{ cluster }}"
        datastore: "{{ datacenter_datastore }}"
        name: "{{ item }}"
        networks: {"net": "{{ mgmt_network }}"}
        validate_certs: false
        allow_duplicates: false
        wait: true
        wait_for_ip_address: true
        folder: "/{{ datacenter }}/vm/{{ vcenter_folder }}"
        power_on: true
        ovf: "{{ avi_ova_path }}"
      delegate_to: localhost
      with_items:
        - "{{ machine_name1 }}"
      tags:
        - avi_pref_test
    - name: Change network adapter settings of the virtual machine
      vmware_guest:
        hostname: "{{ vcenter.vcenter_url }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ vcenter.datacenter }}"
        validate_certs: false
        name: "{{ machine_name1 }}"
        networks:
          - state: present
            label: "Network adapter 1"
            connected: true
            name: "{{ mgmt_network }}"
            start_connected: true
          - state: present
            label: "Network adapter 2"
            connected: true
            name: "{{ mgmt_network }}"
            start_connected: true
      delegate_to: localhost
      tags:
        - machine_ip
    - name: "Set temporary IP address"
      local_action:
        module: vmware_vm_shell
        hostname: "{{ vcenter.vcenter_url }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ datacenter }}"
        validate_certs: false
        vm_id: "{{ item.hostname }}"
        vm_username: root
        vm_password: avi123
        vm_shell: /sbin/ifconfig
        vm_shell_args: "eth0 {{ item.ip }} && route add default gw {{ item.gw }}"
        vm_shell_env:
          - "PATH=/sbin"
        vm_shell_cwd: "/tmp"
      with_items:
        - hostname: "{{ machine_name1 }}"
          ip: "{{ vm_ip }}"
          gw: "{{ vm_gw }}"
      tags:
        - set_ip_addr
    - name: "Setting Static IP in interfaces"
      local_action:
        module: vmware_vm_shell
        hostname: "{{ vcenter.vcenter_url }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ datacenter }}"
        validate_certs: false
        vm_id: "{{ machine_name1 }}"
        vm_username: root
        vm_password: avi123
        vm_shell: /bin/
        vm_shell_args: |
            print >/etc/network/interfaces
            cat > /etc/network/interfaces << "EOF"
            # This file describes the network interfaces available on your system
            # and how to activate them. For more information, see interfaces(5).

            # The loopback network interface
            auto lo
            iface lo inet loopback

            # The primary network interface
            auto eth0
            iface eth0 inet static
            address {{ vm_ip }}
            netmask {{ vm_sub }}
            network {{ vm_net }}
            gateway {{ vm_gw }}
            dns-nameservers {{ dns_server01 }} {{ dns_server02 }}
            auto eth1
            iface eth1 inet dhcp
            EOF
        vm_shell_env:
          - "PATH=/bin"
        vm_shell_cwd: "/tmp"
      delegate_to: localhost
      tags:
        - static_ip
    - name: Gather VM {{ machine_name1 }} facts
      vmware_guest_facts:
        hostname: "{{ vcenter.vcenter_url }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ datacenter }}"
        validate_certs: false
        name: "{{ item }}"
      register: vm_result
      with_items: "{{ machine_name1 }}"
      tags:
        - get_ip_addr
    - name: Get DHCP IP address of the VM "{{ machine_name1 }}"
      debug:
        msg: "{{ vm_result.results | json_query(s_query) }}"
      vars:
        s_query: "[?instance.hw_name == '{{ item }}'].instance.ipv4"
      with_items: "{{ machine_name1 }}"
      tags:
        - get_ip_addr
